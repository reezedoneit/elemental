const { Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, SlashCommandBuilder, PermissionsBitField, REST, Routes } = require('discord.js');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
require('dotenv').config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQLite)
const dbPath = path.resolve(__dirname, 'elemental.db');
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
  else console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite.');
  db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS whitelist (user_id TEXT PRIMARY KEY)`);
    db.run(`CREATE TABLE IF NOT EXISTS blocked_words (word TEXT PRIMARY KEY)`);
    db.run(`CREATE TABLE IF NOT EXISTS guild_settings (guild_id TEXT PRIMARY KEY, verify_role_id TEXT, verify_title TEXT, verify_description TEXT, verify_image TEXT, server_name TEXT)`);
    db.run(`CREATE TABLE IF NOT EXISTS giveaways (id INTEGER PRIMARY KEY AUTOINCREMENT, guild_id TEXT, channel_id TEXT, message_id TEXT, prize TEXT, duration INTEGER, winners INTEGER, conditions TEXT, end_time INTEGER, participants TEXT DEFAULT '')`);
  });
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessageReactions,
  ],
});

// –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤
const colors = {
  embed: '#404040',
  buttonPrimary: '#808080',
  buttonSecondary: '#C0C0C0',
  buttonDanger: '#000000',
  buttonNeutral: '#FFFFFF',
};

// –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ ID –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
const allowedAdminIDs = ['947376242552881153'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ API-–∑–∞–ø—Ä–æ—Å–æ–≤
async function withRetry(fn, retries = 3, delay = 1000) {
  for (let i = 0; i < retries; i++) {
    try {
      return await fn();
    } catch (err) {
      if (err.code === 'UND_ERR_CONNECT_TIMEOUT' && i < retries - 1) {
        const currentDelay = delay * Math.pow(2, i); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
        console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å (ConnectTimeoutError). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${currentDelay} –º—Å...`);
        await new Promise(resolve => setTimeout(resolve, currentDelay));
        continue;
      }
      throw err;
    }
  }
}

// –°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
const commands = [
  new SlashCommandBuilder().setName('admin-panel').setDescription('–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'),
  new SlashCommandBuilder()
    .setName('clear')
    .setDescription('–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ')
    .addIntegerOption(option => 
      option.setName('amount')
        .setDescription('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-100)')
        .setRequired(true)
        .setMinValue(1)
        .setMaxValue(100)
    ),
  new SlashCommandBuilder()
    .setName('verification')
    .setDescription('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å'),
  new SlashCommandBuilder()
    .setName('giveaway')
    .setDescription('–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à')
    .addIntegerOption(option => option.setName('duration').setDescription('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö').setRequired(true))
    .addIntegerOption(option => option.setName('winners').setDescription('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π').setRequired(true))
    .addStringOption(option => option.setName('prize').setDescription('–ü—Ä–∏–∑').setRequired(true))
    .addStringOption(option => option.setName('conditions').setDescription('–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)').setRequired(false)),
  new SlashCommandBuilder()
    .setName('giveaway-reroll')
    .setDescription('–ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞'),
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
async function deployCommands() {
  const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
  try {
    await withRetry(() => rest.put(Routes.applicationCommands(client.user.id), { body: commands.map(c => c.toJSON()) }), 5, 5000);
    console.log('–°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
  }
}

// –°–æ–±—ã—Ç–∏–µ ready
client.once('ready', () => {
  console.log(`–ë–æ—Ç –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –∫–∞–∫ ${client.user.tag}`);
  deployCommands();
  scheduleGiveaways();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
function isAdmin(member) {
  return member && member.permissions.has(PermissionsBitField.Flags.Administrator);
}

// –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function canAccessAdminPanel(userId, member) {
  return allowedAdminIDs.includes(userId) || isAdmin(member);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ª—å–¥–∏–∏
async function getGuildSettings(guildId) {
  return new Promise((resolve, reject) => {
    db.get(`SELECT * FROM guild_settings WHERE guild_id = ?`, [guildId], (err, row) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–∏–ª—å–¥–∏–∏:', err);
        reject(err);
      }
      resolve(row || {});
    });
  });
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
async function scheduleGiveaways() {
  try {
    db.all(`SELECT * FROM giveaways`, [], async (err, rows) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', err);
        return;
      }
      for (const row of rows) {
        const timeLeft = row.end_time - Date.now();
        if (timeLeft > 0) {
          setTimeout(() => endGiveaway(row), timeLeft);
        } else {
          endGiveaway(row);
        }
      }
    });
    setTimeout(scheduleGiveaways, 300000); // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ scheduleGiveaways:', err);
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
async function endGiveaway(row) {
  try {
    const channel = await withRetry(() => client.channels.fetch(row.channel_id).catch(() => null), 5, 5000);
    if (!channel) {
      console.error(`–ö–∞–Ω–∞–ª ${row.channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${row.id}`);
      db.run(`DELETE FROM giveaways WHERE id = ?`, [row.id]);
      return;
    }
    const message = await withRetry(() => channel.messages.fetch(row.message_id).catch(() => null), 5, 5000);
    if (!message) {
      console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ ${row.message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${row.id}`);
      db.run(`DELETE FROM giveaways WHERE id = ?`, [row.id]);
      return;
    }

    const participants = row.participants ? row.participants.split(',').filter(id => id) : [];
    const winnersCount = Math.min(row.winners, participants.length);
    const winners = participants.sort(() => 0.5 - Math.random()).slice(0, winnersCount).map(id => `<@${id}>`);

    const announcement = winners.length > 0
      ? `üéâ –†–æ–∑—ã–≥—Ä—ã—à –æ–∫–æ–Ω—á–µ–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winners.join(', ')} –≤—ã–∏–≥—Ä–∞–ª–∏ ${row.prize}!`
      : `üéâ –†–æ–∑—ã–≥—Ä—ã—à –æ–∫–æ–Ω—á–µ–Ω! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –±—ã–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è ${row.prize}.`;
    
    await withRetry(() => channel.send({ content: announcement }), 5, 5000);
    db.run(`DELETE FROM giveaways WHERE id = ?`, [row.id], (err) => {
      if (err) console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${row.id}:`, err);
    });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${row.id}:`, err);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
client.on('interactionCreate', async interaction => {
  try {
    if (!interaction.isCommand() && !interaction.isButton()) return;

    if (interaction.isCommand()) {
      const { commandName } = interaction;

      if (commandName === 'admin-panel') {
        if (!canAccessAdminPanel(interaction.user.id, interaction.member)) {
          return await withRetry(() => interaction.reply({ content: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.', ephemeral: true }), 5, 5000);
        }
        const embed = new EmbedBuilder()
          .setColor(colors.embed)
          .setTitle('–ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å')
          .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
          .setFooter({ text: 'Elemental Bot' });
        const row1 = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder().setCustomId('anti-crash').setLabel('–ê–Ω—Ç–∏-–ö—Ä–∞—à').setStyle(ButtonStyle.Secondary),
            new ButtonBuilder().setCustomId('roles').setLabel('–†–æ–ª–∏').setStyle(ButtonStyle.Secondary)
          );
        await withRetry(() => interaction.reply({ embeds: [embed], components: [row1], ephemeral: true }), 5, 5000);
      } else if (commandName === 'clear') {
        const amount = interaction.options.getInteger('amount');
        if (amount < 1 || amount > 100) {
          return await withRetry(() => interaction.reply({ content: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.', ephemeral: true }), 5, 5000);
        }
        try {
          const messages = await withRetry(() => interaction.channel.messages.fetch({ limit: amount }), 5, 5000);
          await withRetry(() => interaction.channel.bulkDelete(messages, true), 5, 5000);
          await withRetry(() => interaction.reply({ content: `–£–¥–∞–ª–µ–Ω–æ ${amount} —Å–æ–æ–±—â–µ–Ω–∏–π.`, ephemeral: true }), 5, 5000);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
          await withRetry(() => interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.', ephemeral: true }), 5, 5000);
        }
      } else if (commandName === 'verification') {
        if (!isAdmin(interaction.member)) {
          return await withRetry(() => interaction.reply({ content: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.', ephemeral: true }), 5, 5000);
        }
        const embed = new EmbedBuilder()
          .setColor(colors.embed)
          .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
          .setDescription('–í–≤–µ–¥–∏—Ç–µ ID —Ä–æ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.')
          .setFooter({ text: 'Elemental Bot' });
        await withRetry(() => interaction.reply({ embeds: [embed], ephemeral: true }), 5, 5000);

        const filter = m => m.author.id === interaction.user.id && m.channel.id === interaction.channel.id;
        const roleCollector = interaction.channel.createMessageCollector({ filter, max: 1, time: 60000 });

        roleCollector.on('collect', async m => {
          try {
            const roleId = m.content.trim();
            if (!/^\d{17,19}$/.test(roleId)) {
              await withRetry(() => interaction.followUp({ content: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–æ–ª–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 17-19 —Ü–∏—Ñ—Ä.', ephemeral: true }), 5, 5000);
              return;
            }
            const role = await withRetry(() => interaction.guild.roles.fetch(roleId).catch(() => null), 5, 5000);
            if (!role) {
              await withRetry(() => interaction.followUp({ content: '–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', ephemeral: true }), 5, 5000);
              return;
            }
            if (role.position >= interaction.guild.members.me.roles.highest.position) {
              await withRetry(() => interaction.followUp({ content: '–†–æ–ª—å –≤—ã—à–µ —Ä–æ–ª–∏ –±–æ—Ç–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –Ω–∏–∂–µ.', ephemeral: true }), 5, 5000);
              return;
            }
            if (!interaction.guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles)) {
              await withRetry(() => interaction.followUp({ content: '–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏.', ephemeral: true }), 5, 5000);
              return;
            }
            db.run(`INSERT OR REPLACE INTO guild_settings (guild_id, verify_role_id) VALUES (?, ?)`, [interaction.guild.id, roleId], async (err) => {
              if (err) {
                console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
                await withRetry(() => interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.', ephemeral: true }), 5, 5000);
                return;
              }
              await withRetry(() => m.delete().catch(err => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID —Ä–æ–ª–∏:', err)), 5, 5000);
              const nameEmbed = new EmbedBuilder()
                .setColor(colors.embed)
                .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
                .setDescription('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.')
                .setFooter({ text: '–ü—Ä–∏–º–µ—Ä: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä `–ù–∞–∑–≤–∞–Ω–∏–µ`!' });
              await withRetry(() => interaction.editReply({ embeds: [nameEmbed], components: [], ephemeral: true }), 5, 5000);
            });
            const nameCollector = interaction.channel.createMessageCollector({ filter, max: 1, time: 60000 });

            nameCollector.on('collect', async mn => {
              try {
                const serverName = mn.content.trim() === 'default' ? null : mn.content.trim();
                if (!serverName && mn.content.trim() !== 'default') {
                  await withRetry(() => interaction.followUp({ content: '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', ephemeral: true }), 5, 5000);
                  return;
                }
                db.run(`UPDATE guild_settings SET server_name = ? WHERE guild_id = ?`, [serverName, interaction.guild.id], async (err) => {
                  if (err) {
                    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', err);
                    await withRetry(() => interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞.', ephemeral: true }), 5, 5000);
                    return;
                  }
                  await withRetry(() => mn.delete().catch(err => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–∞:', err)), 5, 5000);
                  await withRetry(() => interaction.editReply({ content: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${serverName || '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'}.`, embeds: [], components: [], ephemeral: true }), 5, 5000);

                  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                  const settings = await getGuildSettings(interaction.guild.id);
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ
                  await withRetry(() => interaction.channel.send({ content: 'https://i.postimg.cc/prLwqfGS/download-2.jpg' }), 5, 5000);
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º embed —Å –∫–Ω–æ–ø–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                  const verificationEmbed = new EmbedBuilder()
                    .setColor(colors.embed)
                    .setTitle(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä ${settings.server_name || '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'}!`)
                    .setDescription('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Å–µ—Ä–≤–µ—Ä–∞.')
                    .setFooter({ text: 'Elemental Bot' });
                  const verifyButton = new ActionRowBuilder()
                    .addComponents(
                      new ButtonBuilder()
                        .setCustomId('verify')
                        .setLabel('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è')
                        .setEmoji('üìé')
                        .setStyle(ButtonStyle.Secondary)
                    );
                  await withRetry(() => interaction.channel.send({ embeds: [verificationEmbed], components: [verifyButton] }), 5, 5000);
                });
              } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –≤ nameCollector:', err);
                await withRetry(() => interaction.followUp({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞.', ephemeral: true }), 5, 5000);
              }
            });

            nameCollector.on('end', collected => {
              if (!collected.size) {
                withRetry(() => interaction.followUp({ content: '–í—Ä–µ–º—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ.', ephemeral: true }), 5, 5000);
              }
            });
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ roleCollector:', err);
            await withRetry(() => interaction.followUp({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID —Ä–æ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID.', ephemeral: true }), 5, 5000);
          }
        });

        roleCollector.on('end', collected => {
          if (!collected.size) {
            withRetry(() => interaction.editReply({ content: '–í—Ä–µ–º—è –¥–ª—è –≤–≤–æ–¥–∞ ID —Ä–æ–ª–∏ –∏—Å—Ç–µ–∫–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /verification —Å–Ω–æ–≤–∞.', embeds: [], components: [], ephemeral: true }), 5, 5000);
          }
        });
      } else if (commandName === 'giveaway') {
        if (!isAdmin(interaction.member)) {
          return await withRetry(() => interaction.reply({ content: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏.', ephemeral: true }), 5, 5000);
        }
        const duration = interaction.options.getInteger('duration');
        const winners = interaction.options.getInteger('winners');
        const prize = interaction.options.getString('prize');
        const conditions = interaction.options.getString('conditions') || '–ù–µ—Ç —É—Å–ª–æ–≤–∏–π';

        if (duration <= 0 || winners <= 0) {
          return await withRetry(() => interaction.reply({ content: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0.', ephemeral: true }), 5, 5000);
        }

        const endTime = Date.now() + duration * 60 * 1000;
        const embed = new EmbedBuilder()
          .setColor(colors.embed)
          .setTitle('üéâ –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!')
          .setDescription(`**–ü—Ä–∏–∑:** ${prize}\n**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${duration} –º–∏–Ω—É—Ç\n**–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:** ${winners}\n**–£—Å–ª–æ–≤–∏—è:** ${conditions}\n**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** 0\n–ù–∞–∂–º–∏—Ç–µ üéâ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!`)
          .setFooter({ text: `–û–∫–æ–Ω—á–∞–Ω–∏–µ: ${new Date(endTime).toLocaleString()}` });

        await withRetry(() => interaction.reply({ embeds: [embed] }), 5, 5000);
        const msg = await withRetry(() => interaction.fetchReply().catch(err => { console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', err); return null; }), 5, 5000);
        if (!msg) {
          await withRetry(() => interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.', ephemeral: true }), 5, 5000);
          return;
        }
        await withRetry(() => msg.react('üéâ').catch(err => {
          console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏:', err);
          interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞.', ephemeral: true });
        }), 5, 5000);

        db.run(`INSERT INTO giveaways (guild_id, channel_id, message_id, prize, duration, winners, conditions, end_time, participants) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`, 
          [interaction.guild.id, interaction.channel.id, msg.id, prize, duration, winners, conditions, endTime, ''], (err) => {
            if (err) {
              console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', err);
              withRetry(() => interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', ephemeral: true }), 5, 5000);
            } else {
              setTimeout(() => {
                db.get(`SELECT * FROM giveaways WHERE message_id = ?`, [msg.id], (err, row) => {
                  if (err || !row) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', err);
                    return;
                  }
                  endGiveaway(row);
                });
              }, duration * 60 * 1000);
            }
          });
      } else if (commandName === 'giveaway-reroll') {
        if (!isAdmin(interaction.member)) {
          return await withRetry(() => interaction.reply({ content: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.', ephemeral: true }), 5, 5000);
        }
        db.get(`SELECT participants, winners, prize, channel_id FROM giveaways WHERE guild_id = ? ORDER BY end_time DESC LIMIT 1`, [interaction.guild.id], async (err, row) => {
          if (err || !row) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', err);
            return await withRetry(() => interaction.reply({ content: '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true }), 5, 5000);
          }
          const participants = row.participants ? row.participants.split(',').filter(id => id) : [];
          const winnersCount = Math.min(row.winners, participants.length);
          const winners = participants.sort(() => 0.5 - Math.random()).slice(0, winnersCount).map(id => `<@${id}>`);

          const channel = await withRetry(() => client.channels.fetch(row.channel_id).catch(() => null), 5, 5000);
          if (!channel) {
            return await withRetry(() => interaction.reply({ content: '–ö–∞–Ω–∞–ª —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true }), 5, 5000);
          }

          if (winners.length > 0) {
            await withRetry(() => channel.send({ content: `üéâ –ù–æ–≤—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winners.join(', ')} –≤—ã–∏–≥—Ä–∞–ª–∏ ${row.prize}!` }), 5, 5000);
            await withRetry(() => interaction.reply({ content: `–ü–µ—Ä–µ–≤—ã–±—Ä–∞–Ω—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winners.join(', ')}.`, ephemeral: true }), 5, 5000);
          } else {
            await withRetry(() => interaction.reply({ content: 'üéâ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ã–±–æ—Ä–∞.', ephemeral: true }), 5, 5000);
          }
        });
      }
    } else if (interaction.isButton()) {
      const customId = interaction.customId;

      if (customId === 'back_to_main') {
        const embed = new EmbedBuilder()
          .setColor(colors.embed)
          .setTitle('–ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å')
          .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
          .setFooter({ text: 'Elemental Bot' });
        const row1 = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder().setCustomId('anti-crash').setLabel('–ê–Ω—Ç–∏-–ö—Ä–∞—à').setStyle(ButtonStyle.Secondary),
            new ButtonBuilder().setCustomId('roles').setLabel('–†–æ–ª–∏').setStyle(ButtonStyle.Secondary)
          );
        await withRetry(() => interaction.update({ embeds: [embed], components: [row1], ephemeral: true }), 5, 5000);
      } else if (customId === 'anti-crash') {
        const embed = new EmbedBuilder()
          .setColor(colors.embed)
          .setTitle('–ê–Ω—Ç–∏-–ö—Ä–∞—à')
          .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
          .setFooter({ text: 'Elemental Bot' });
        const row = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder().setCustomId('whitelist_add').setLabel('–î–æ–±–∞–≤–∏—Ç—å –≤ whitelist').setStyle(ButtonStyle.Secondary),
            new ButtonBuilder().setCustomId('whitelist_remove').setLabel('–£–¥–∞–ª–∏—Ç—å –∏–∑ whitelist').setStyle(ButtonStyle.Secondary),
            new ButtonBuilder().setCustomId('blocked_add').setLabel('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞').setStyle(ButtonStyle.Secondary),
            new ButtonBuilder().setCustomId('blocked_remove').setLabel('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞').setStyle(ButtonStyle.Secondary),
            new ButtonBuilder().setCustomId('blocked_list').setLabel('–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤').setStyle(ButtonStyle.Secondary)
          );
        const backRow = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder().setCustomId('back_to_main').setLabel('–ù–∞–∑–∞–¥').setStyle(ButtonStyle.Danger)
          );
        await withRetry(() => interaction.update({ embeds: [embed], components: [row, backRow], ephemeral: true }), 5, 5000);
      } else if (customId === 'roles') {
        const embed = new EmbedBuilder()
          .setColor(colors.embed)
          .setTitle('–†–æ–ª–∏')
          .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
          .setFooter({ text: 'Elemental Bot' });
        const row = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder().setCustomId('set_verify_role').setLabel('–†–æ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏').setStyle(ButtonStyle.Secondary)
          );
        const backRow = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder().setCustomId('back_to_main').setLabel('–ù–∞–∑–∞–¥').setStyle(ButtonStyle.Danger)
          );
        await withRetry(() => interaction.update({ embeds: [embed], components: [row, backRow], ephemeral: true }), 5, 5000);
      } else if (customId === 'whitelist_add') {
        await withRetry(() => interaction.reply({ content: '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è whitelist:', ephemeral: true }), 5, 5000);
        const filter = m => m.author.id === interaction.user.id;
        const collector = interaction.channel.createMessageCollector({ filter, max: 1, time: 30000 });
        collector.on('collect', async m => {
          try {
            const userId = m.content.trim();
            if (!/^\d{17,19}$/.test(userId)) {
              await withRetry(() => interaction.followUp({ content: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 17-19 —Ü–∏—Ñ—Ä.', ephemeral: true }), 5, 5000);
              return;
            }
            const user = await withRetry(() => client.users.fetch(userId).catch(() => null), 5, 5000);
            if (!user) {
              await withRetry(() => interaction.followUp({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true }), 5, 5000);
              return;
            }
            db.run(`INSERT OR IGNORE INTO whitelist (user_id) VALUES (?)`, [userId], (err) => {
              if (err) {
                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist:', err);
                withRetry(() => interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.', ephemeral: true }), 5, 5000);
              } else {
                withRetry(() => interaction.followUp({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist.', ephemeral: true }), 5, 5000);
              }
            });
            await withRetry(() => m.delete().catch(() => {}), 5, 5000);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ whitelist_add collector:', err);
            await withRetry(() => interaction.followUp({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.', ephemeral: true }), 5, 5000);
          }
        });
        collector.on('end', collected => {
          if (!collected.size) withRetry(() => interaction.followUp({ content: '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.', ephemeral: true }), 5, 5000);
        });
      } else if (customId === 'whitelist_remove') {
        await withRetry(() => interaction.reply({ content: '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ whitelist:', ephemeral: true }), 5, 5000);
        const filter = m => m.author.id === interaction.user.id;
        const collector = interaction.channel.createMessageCollector({ filter, max: 1, time: 30000 });
        collector.on('collect', async m => {
          try {
            const userId = m.content.trim();
            if (!/^\d{17,19}$/.test(userId)) {
              await withRetry(() => interaction.followUp({ content: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 17-19 —Ü–∏—Ñ—Ä.', ephemeral: true }), 5, 5000);
              return;
            }
            db.run(`DELETE FROM whitelist WHERE user_id = ?`, [userId], (err) => {
              if (err) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ whitelist:', err);
                withRetry(() => interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.', ephemeral: true }), 5, 5000);
              } else {
                withRetry(() => interaction.followUp({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ whitelist.', ephemeral: true }), 5, 5000);
              }
            });
            await withRetry(() => m.delete().catch(() => {}), 5, 5000);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ whitelist_remove collector:', err);
            await withRetry(() => interaction.followUp({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.', ephemeral: true }), 5, 5000);
          }
        });
        collector.on('end', collected => {
          if (!collected.size) withRetry(() => interaction.followUp({ content: '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.', ephemeral: true }), 5, 5000);
        });
      } else if (customId === 'blocked_add') {
        await withRetry(() => interaction.reply({ content: '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3):', ephemeral: true }), 5, 5000);
        const filter = m => m.author.id === interaction.user.id;
        const collector = interaction.channel.createMessageCollector({ filter, max: 1, time: 30000 });
        collector.on('collect', async m => {
          try {
            const words = m.content.toLowerCase().split(',').map(w => w.trim()).filter(w => w !== '');
            if (words.length === 0) {
              await withRetry(() => interaction.followUp({ content: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.', ephemeral: true }), 5, 5000);
              return;
            }
            let addedWords = [];
            words.forEach(word => {
              db.run(`INSERT OR IGNORE INTO blocked_words (word) VALUES (?)`, [word], (err) => {
                if (err) {
                  console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ "${word}":`, err);
                } else {
                  addedWords.push(word);
                }
              });
            });
            await withRetry(() => interaction.followUp({ content: `–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–∞: ${addedWords.join(', ') || '–ù–∏ –æ–¥–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)'}.`, ephemeral: true }), 5, 5000);
            await withRetry(() => m.delete().catch(() => {}), 5, 5000);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ blocked_add collector:', err);
            await withRetry(() => interaction.followUp({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.', ephemeral: true }), 5, 5000);
          }
        });
        collector.on('end', collected => {
          if (!collected.size) withRetry(() => interaction.followUp({ content: '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.', ephemeral: true }), 5, 5000);
        });
      } else if (customId === 'blocked_remove') {
        await withRetry(() => interaction.reply({ content: '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–ª–æ–≤–æ1, —Å–ª–æ–≤–æ2, —Å–ª–æ–≤–æ3):', ephemeral: true }), 5, 5000);
        const filter = m => m.author.id === interaction.user.id;
        const collector = interaction.channel.createMessageCollector({ filter, max: 1, time: 30000 });
        collector.on('collect', async m => {
          try {
            const words = m.content.toLowerCase().split(',').map(w => w.trim()).filter(w => w !== '');
            if (words.length === 0) {
              await withRetry(() => interaction.followUp({ content: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.', ephemeral: true }), 5, 5000);
              return;
            }
            let removedWords = [];
            words.forEach(word => {
              db.run(`DELETE FROM blocked_words WHERE word = ?`, [word], (err) => {
                if (err) {
                  console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ "${word}":`, err);
                } else {
                  removedWords.push(word);
                }
              });
            });
            await withRetry(() => interaction.followUp({ content: `–£–¥–∞–ª–µ–Ω—ã —Å–ª–æ–≤–∞: ${removedWords.join(', ') || '–ù–∏ –æ–¥–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)'}.`, ephemeral: true }), 5, 5000);
            await withRetry(() => m.delete().catch(() => {}), 5, 5000);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ blocked_remove collector:', err);
            await withRetry(() => interaction.followUp({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.', ephemeral: true }), 5, 5000);
          }
        });
        collector.on('end', collected => {
          if (!collected.size) withRetry(() => interaction.followUp({ content: '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.', ephemeral: true }), 5, 5000);
        });
      } else if (customId === 'blocked_list') {
        db.all(`SELECT * FROM blocked_words`, [], (err, rows) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤:', err);
            return withRetry(() => interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.', ephemeral: true }), 5, 5000);
          }
          const list = rows.map(r => r.word).join(', ') || '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç';
          withRetry(() => interaction.reply({ content: `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: ${list}`, ephemeral: true }), 5, 5000);
        });
      } else if (customId === 'set_verify_role') {
        await withRetry(() => interaction.reply({ content: '–í–≤–µ–¥–∏—Ç–µ ID —Ä–æ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', ephemeral: true }), 5, 5000);
        const filter = m => m.author.id === interaction.user.id;
        const collector = interaction.channel.createMessageCollector({ filter, max: 1, time: 30000 });
        collector.on('collect', async m => {
          try {
            const roleId = m.content.trim();
            if (!/^\d{17,19}$/.test(roleId)) {
              await withRetry(() => interaction.followUp({ content: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–æ–ª–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 17-19 —Ü–∏—Ñ—Ä.', ephemeral: true }), 5, 5000);
              return;
            }
            const role = await withRetry(() => interaction.guild.roles.fetch(roleId).catch(() => null), 5, 5000);
            if (!role) {
              await withRetry(() => interaction.followUp({ content: '–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', ephemeral: true }), 5, 5000);
              return;
            }
            if (role.position >= interaction.guild.members.me.roles.highest.position) {
              await withRetry(() => interaction.followUp({ content: '–†–æ–ª—å –≤—ã—à–µ —Ä–æ–ª–∏ –±–æ—Ç–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –Ω–∏–∂–µ.', ephemeral: true }), 5, 5000);
              return;
            }
            if (!interaction.guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles)) {
              await withRetry(() => interaction.followUp({ content: '–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏.', ephemeral: true }), 5, 5000);
              return;
            }
            db.run(`INSERT OR REPLACE INTO guild_settings (guild_id, verify_role_id) VALUES (?, ?)`, [interaction.guild.id, roleId], (err) => {
              if (err) {
                console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
                withRetry(() => interaction.followUp({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.', ephemeral: true }), 5, 5000);
              } else {
                withRetry(() => interaction.followUp({ content: '–†–æ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.', ephemeral: true }), 5, 5000);
              }
            });
            await withRetry(() => m.delete().catch(err => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err)), 5, 5000);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ set_verify_role collector:', err);
            await withRetry(() => interaction.followUp({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.', ephemeral: true }), 5, 5000);
          }
        });
        collector.on('end', collected => {
          if (!collected.size) withRetry(() => interaction.followUp({ content: '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.', ephemeral: true }), 5, 5000);
        });
      } else if (customId === 'verify') {
        const settings = await getGuildSettings(interaction.guild.id).catch(() => null);
        const verifyRoleId = settings?.verify_role_id;
        if (!verifyRoleId) {
          await withRetry(() => interaction.reply({ content: '–†–æ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ /admin-panel.', ephemeral: true }), 5, 5000);
          return;
        }
        const verifyRole = interaction.guild.roles.cache.get(verifyRoleId);
        if (!verifyRole) {
          await withRetry(() => interaction.reply({ content: '–†–æ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', ephemeral: true }), 5, 5000);
          return;
        }
        const member = interaction.member;
        if (!interaction.guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles)) {
          await withRetry(() => interaction.reply({ content: '–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏.', ephemeral: true }), 5, 5000);
          return;
        }
        if (verifyRole.position >= interaction.guild.members.me.roles.highest.position) {
          await withRetry(() => interaction.reply({ content: '–†–æ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã—à–µ —Ä–æ–ª–∏ –±–æ—Ç–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏.', ephemeral: true }), 5, 5000);
          return;
        }
        if (member.roles.cache.has(verifyRoleId)) {
          await withRetry(() => interaction.reply({ content: '–í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!', ephemeral: true }), 5, 5000);
          return;
        }
        await withRetry(() => member.roles.add(verifyRole).catch(err => {
          console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
          interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.', ephemeral: true });
        }), 5, 5000);
        await withRetry(() => interaction.reply({ content: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!', ephemeral: true }), 5, 5000);
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ interactionCreate:', err);
    if (!interaction.replied && !interaction.deferred) {
      await withRetry(() => interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true }).catch(() => {}), 5, 5000);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
client.on('messageReactionAdd', async (reaction, user) => {
  try {
    if (user.bot || !reaction.message.guild) return;
    if (reaction.emoji.name !== 'üéâ') return;

    const message = reaction.message;
    db.get(`SELECT * FROM giveaways WHERE message_id = ? AND channel_id = ?`, [message.id, message.channel.id], async (err, row) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', err);
        return;
      }
      if (!row) {
        console.error(`–†–æ–∑—ã–≥—Ä—ã—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }
      let participants = row.participants ? row.participants.split(',').filter(id => id) : [];
      if (!participants.includes(user.id)) {
        participants.push(user.id);
        db.run(`UPDATE giveaways SET participants = ? WHERE message_id = ?`, [participants.join(','), message.id], async (updateErr) => {
          if (updateErr) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', updateErr);
            return;
          }
          try {
            const embed = EmbedBuilder.from(message.embeds[0]).setDescription(
              `**–ü—Ä–∏–∑:** ${row.prize}\n**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${row.duration} –º–∏–Ω—É—Ç\n**–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:** ${row.winners}\n**–£—Å–ª–æ–≤–∏—è:** ${row.conditions}\n**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${participants.length}\n–ù–∞–∂–º–∏—Ç–µ üéâ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!`
            );
            await withRetry(() => message.edit({ embeds: [embed] }), 5, 5000);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', err);
          }
        });
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ messageReactionAdd:', err);
  }
});

client.on('messageReactionRemove', async (reaction, user) => {
  try {
    if (user.bot || !reaction.message.guild) return;
    if (reaction.emoji.name !== 'üéâ') return;

    const message = reaction.message;
    db.get(`SELECT * FROM giveaways WHERE message_id = ? AND channel_id = ?`, [message.id, message.channel.id], async (err, row) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', err);
        return;
      }
      if (!row) {
        console.error(`–†–æ–∑—ã–≥—Ä—ã—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }
      let participants = row.participants ? row.participants.split(',').filter(id => id) : [];
      if (participants.includes(user.id)) {
        participants = participants.filter(id => id !== user.id);
        db.run(`UPDATE giveaways SET participants = ? WHERE message_id = ?`, [participants.join(','), message.id], async (updateErr) => {
          if (updateErr) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', updateErr);
            return;
          }
          try {
            const embed = EmbedBuilder.from(message.embeds[0]).setDescription(
              `**–ü—Ä–∏–∑:** ${row.prize}\n**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${row.duration} –º–∏–Ω—É—Ç\n**–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:** ${row.winners}\n**–£—Å–ª–æ–≤–∏—è:** ${row.conditions}\n**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${participants.length}\n–ù–∞–∂–º–∏—Ç–µ üéâ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!`
            );
            await withRetry(() => message.edit({ embeds: [embed] }), 5, 5000);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', err);
          }
        });
      }
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ messageReactionRemove:', err);
  }
});

// –ê–Ω—Ç–∏-–∫—Ä–∞—à (—Å–æ–æ–±—â–µ–Ω–∏—è)
client.on('messageCreate', async message => {
  try {
    if (message.author.bot || !message.guild) return;

    db.get(`SELECT * FROM whitelist WHERE user_id = ?`, [message.author.id], async (err, row) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist:', err);
        return;
      }
      if (row) return;

      const contentLower = message.content.toLowerCase();
      const forbiddenSymbols = ['#', '##', '-#'];
      if (forbiddenSymbols.some(sym => message.content.includes(sym))) {
        const member = message.member;
        if (member && member.moderatable) {
          await withRetry(() => member.timeout(24 * 60 * 60 * 1000, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤').catch(err => console.error('–û—à–∏–±–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞ –∑–∞ —Å–∏–º–≤–æ–ª—ã:', err)), 5, 5000);
        }
        await withRetry(() => message.delete().catch(err => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err)), 5, 5000);
        return;
      }

      db.all(`SELECT * FROM blocked_words`, [], async (err, rows) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤:', err);
          return;
        }
        const blocked = rows.map(r => r.word);
        if (blocked.some(word => contentLower.includes(word))) {
          const member = message.member;
          if (member && member.moderatable) {
            await withRetry(() => member.timeout(24 * 60 * 60 * 1000, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤').catch(err => console.error('–û—à–∏–±–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞ –∑–∞ —Å–ª–æ–≤–∞:', err)), 5, 5000);
          }
          await withRetry(() => message.delete().catch(err => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err)), 5, 5000);
        }
      });
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ messageCreate:', err);
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err);
});

// –õ–æ–≥–∏–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function loginWithRetry() {
  const maxRetries = 5;
  const baseDelay = 5000;
  for (let i = 0; i < maxRetries; i++) {
    try {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ ${i + 1}...`);
      await client.login(process.env.BOT_TOKEN);
      console.log('–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω.');
      return;
    } catch (err) {
      const currentDelay = baseDelay * Math.pow(2, i); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
      if (err.code === 'UND_ERR_CONNECT_TIMEOUT' && i < maxRetries - 1) {
        console.warn(`–ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å (ConnectTimeoutError). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${currentDelay} –º—Å...`);
        await new Promise(resolve => setTimeout(resolve, currentDelay));
        continue;
      }
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', err);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
loginWithRetry();